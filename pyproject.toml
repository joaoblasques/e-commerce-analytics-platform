[tool.poetry]
name = "ecommerce-analytics-platform"
version = "0.1.0"
description = "Real-time e-commerce analytics platform using Apache Spark, PySpark, and Kafka"
authors = ["E-Commerce Analytics Team <team@ecommerce-analytics.com>"]
license = "MIT"
readme = "README.md"
homepage = "https://github.com/joaoblasques/e-commerce-analytics-platform"
repository = "https://github.com/joaoblasques/e-commerce-analytics-platform"
documentation = "https://github.com/joaoblasques/e-commerce-analytics-platform/docs"
keywords = ["spark", "kafka", "analytics", "ecommerce", "streaming", "data-engineering"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Information Analysis",
]
packages = [{include = "src"}]

[tool.poetry.dependencies]
python = "^3.10"
# Core dependencies (will be expanded in future phases)
fastapi = "^0.104.0"
uvicorn = {extras = ["standard"], version = "^0.24.0"}
pandas = "^2.0.3"
numpy = "^1.24.3"
# Database and Storage
psycopg2-binary = "^2.9.7"
sqlalchemy = "^2.0.19"
alembic = "^1.12.0"
redis = "^4.5.4"
# Development will add more dependencies as needed per task
# Configuration and Logging
pydantic = "^2.0.0"
pydantic-settings = "^2.0.0"
python-dotenv = "^1.0.0"
loguru = "^0.7.0"
# HTTP and Authentication
httpx = "^0.24.1"
python-jose = {extras = ["cryptography"], version = "^3.3.0"}
passlib = {extras = ["bcrypt"], version = "^1.7.4"}
# Utilities
click = "^8.1.3"
pyyaml = "^6.0.1"
loguru = "^0.7.0"
loguru = "^0.7.0"
python-dateutil = "^2.8.2"
pytz = "^2023.3"
# Test data generation
faker = "^19.3.0"
requests = "^2.31.0"
# System monitoring
psutil = "^5.9.0"
# Kafka client
kafka-python = "^2.0.2"
# Data generation dependencies
numpy = "^1.24.3"

[tool.poetry.group.dev.dependencies]
# Testing
pytest = "^7.3.1"
pytest-cov = "^4.1.0"
pytest-mock = "^3.11.1"
pytest-asyncio = "^0.21.0"
pytest-xdist = "^3.3.1"
# Code Quality
black = "^23.3.0"
flake8 = "^6.0.0"
mypy = "^1.3.0"
isort = "^5.12.0"
# Pre-commit and Git Hooks
pre-commit = "^3.3.2"
# Development Tools
jupyter = "^1.0.0"
notebook = "^6.5.4"
ipykernel = "^6.23.1"
# Type Stubs
types-redis = "^4.5.5"
types-requests = "^2.31.0"
types-pyyaml = "^6.0.12"
# Documentation
sphinx = "^7.0.1"
sphinx-rtd-theme = "^1.2.2"
# Performance and Load Testing
locust = "^2.15.1"
safety = "^2.3.0"
bandit = "^1.7.5"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry.scripts]
ecap = "src.cli:main"

# Black configuration
[tool.black]
line-length = 88
target-version = ['py39']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/'

# isort configuration
[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88
known_first_party = ["src"]
known_third_party = ["pyspark", "kafka", "fastapi", "streamlit"]

# MyPy configuration
[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_optional = true
no_implicit_optional = true
disallow_any_unimported = true
disallow_any_expr = false
disallow_any_decorated = false
disallow_any_explicit = false
disallow_any_generics = true
disallow_subclassing_any = true
disallow_untyped_calls = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_reexport = true
strict_equality = true
show_error_codes = true
show_column_numbers = true
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = [
    "pyspark.*",
    "delta.*",
    "kafka.*",
    "confluent_kafka.*",
    "minio.*",
    "plotly.*",
]
ignore_missing_imports = true

# Flake8 configuration
[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "E501", "W503"]
exclude = [
    ".git",
    "__pycache__",
    ".venv",
    "build",
    "dist",
    "*.egg-info",
    ".pytest_cache",
    ".mypy_cache",
]
per-file-ignores = [
    "__init__.py:F401",
    "tests/*:S101",
]

# Pytest configuration
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml",
    "--cov-fail-under=80",
    "-ra",
    "--tb=short",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "performance: marks tests as performance tests",
    "spark: marks tests that require Spark",
    "kafka: marks tests that require Kafka",
    "database: marks tests that require database",
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/build/*",
    "*/dist/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
ignore_errors = true
show_missing = true
precision = 2
