---
name: CI/CD Pipeline

on:
  push:
    branches: [master, develop]
  pull_request:
    branches: [master, develop]
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  actions: read

env:
  PYTHON_VERSION: '3.10'
  POETRY_VERSION: '1.4.2'

jobs:
  testing:
    name: Run Tests
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: ['3.10', '3.11']

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root

      - name: Install project
        run: poetry install --no-interaction

      - name: Run unit tests
        run: poetry run pytest tests/unit/ -v --tb=short

      - name: Run integration tests
        run: poetry run pytest tests/integration/ -v --tb=short

      - name: Run all tests with coverage
        run: poetry run pytest --cov=src --cov-report=xml --cov-report=term-missing --cov-fail-under=80

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root

      - name: Install project
        run: poetry install --no-interaction

      - name: Run Safety (dependency vulnerability scan)
        run: poetry run safety check --ignore 66742 --ignore 71199 --ignore 64459 --ignore 64396 --ignore 76903 --ignore 72962 --ignore 62044 --ignore 75180 --ignore 70716 --ignore 70715 --ignore 73725 --ignore 68094

      - name: Run Bandit (security linting)
        run: poetry run bandit -r src/ -f json -o bandit-report.json

      - name: Upload Bandit results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: bandit-results
          path: bandit-report.json

  dependency-scan:
    name: Dependency Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: [testing, security-scan]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root

      - name: Install project
        run: poetry install --no-interaction

      - name: Build package
        run: poetry build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-files
          path: dist/

      - name: Test package installation
        run: |
          pip install dist/*.whl
          python -c "import src; print('Package installed successfully')"

  # pre-commit:
  #   name: Pre-commit Hooks
  #   runs-on: ubuntu-latest
  #
  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v4
  #
  #   - name: Set up Python
  #     uses: actions/setup-python@v4
  #     with:
  #       python-version: ${{ env.PYTHON_VERSION }}
  #
  #   - name: Install Poetry
  #     uses: snok/install-poetry@v1
  #     with:
  #       version: ${{ env.POETRY_VERSION }}
  #       virtualenvs-create: true
  #       virtualenvs-in-project: true
  #
  #   - name: Load cached venv
  #     id: cached-poetry-dependencies
  #     uses: actions/cache@v3
  #     with:
  #       path: .venv
  #       key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
  #
  #   - name: Install dependencies
  #     if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
  #     run: poetry install --no-interaction --no-root
  #
  #   - name: Install project
  #     run: poetry install --no-interaction
  #
  #   - name: Run pre-commit hooks
  #     run: poetry run pre-commit run --all-files

  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [testing, security-scan, build]
    if: always()

    steps:
      - name: Check job results
        run: |
          echo "Testing: ${{ needs.testing.result }}"
          echo "Security Scan: ${{ needs.security-scan.result }}"
          echo "Build: ${{ needs.build.result }}"

          if [[ "${{ needs.testing.result }}" == "success" && \
                "${{ needs.security-scan.result }}" == "success" && \
                "${{ needs.build.result }}" == "success" ]]; then
            echo "✅ All CI checks passed!"
            echo "ci_status=success" >> $GITHUB_OUTPUT
          else
            echo "❌ Some CI checks failed!"
            echo "ci_status=failure" >> $GITHUB_OUTPUT
          fi
        id: check_results

      - name: Create CI Summary
        run: |
          echo "# CI/CD Pipeline Results 🚀" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Testing | ${{ needs.testing.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Scan | ${{ needs.security-scan.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Build | ${{ needs.build.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Overall Status: ${{ steps.check_results.outputs.ci_status == 'success' && '✅ SUCCESS' || '❌ FAILURE' }}" >> $GITHUB_STEP_SUMMARY
